## Теория

Инфраструктура Entity Framework Соге игнорирует отношения. если только они
явно не включаются в запросы. Это означает. что навигационные свойства. такие как
свойство Catego r y. определенное в классе Product, по умолчанию будут оставляться
равными null. 


### Запросы

В инициировании множества запросов из одного объекта IQueryaЫe<T> нет ничего плохого при условии, что именно в этом состояло ваше намерение. Проблема возникает, когда
вы забываете, каким образом ведут себя объекты IQueryaЬle<T>, обращаетесь с ними
как с объектами IEnumeraЫe<T> и непредумышленно делаете запросы, не замечая их.
В высоконагруженном приложении объем ресурсов, впустую растрачиваемых на несущественные запросы, может стать значительным и привести к увеличению затрат в проекте. 


### MVC
Цель паттерна MVC - разделение приложения на три функциональных области, каждая из которых может содержать и логиу и данные. Цель не в том, чтобы устранить логику из модели. Наоборот, цель в том, чтобы гарантировать наличие в модели только логики предназначенной для создания и управления данными

### ViewModel
Правильно использовать строгую типизацию представлений. Используя ViewBag или ViewData, наше представление теряет строгую типизацию.  Лучше всего использовать ViewModel.

Viewmodel – содержит поля, которые нужны для представлений. Это модель определённого View, или сразу для нескольких представлений. Они могут иметь логику для валидации, используя аннотацию данных для проверки моделей. ViewModel помогает реализовать строгую типизацию представления. Может быть нескольких сущностей в нескольких моделей.

### Проектирование модели данных

Модель - это представление реальных объектов, процессов и правил, которые определяют сферу приложения, известную как предметная
область. 

Модель, которую часто называют моделью предметной области, содержит объекты С# (или объекты предметной области), образующие "вселенную" приложения, и методы. позволяющие манипулировать ими. Представления и контроллеры открывают доступ клиентам к предметной области в согласованной манере, и любое корректно разработанное приложение MVC начинается с хорошо спроектированной модели, котора  затем служит центральным узлом при добавлении контроллеров и представлений. 

### Как работают дескрипторы при связывании данных из формы

Для каждого свойства класса модели GuestResponse определены элементы label и input (или элемент select в случае свойства WillAttend). Каждый элемент ассоциирован со свойством модели с применением еще одного атрибута вспомогательной функции дескриптора - asp-for.  Атрибуты вспомогательных функций дескрипторов конфигурируют элементы, чтобы привязать их к объекту модели.

### Запрос

Привязка модели освобождает нас от решения утомительной и подверженной ошибкам задачи по инспектированию НТТР-запроса и извлечению всех требующихся значений данных, но (что самое важное) при желании мы могли бы обрабатывать запрос вручную, поскольку MVC обеспечивает легкий доступ ко всем данным запроса. Ничто не скрыто от разработчика, но есть несколько удобных средств, которые упрощают работу с НТТР и HTML; тем не менее, использовать их вовсе не обязательно. 

### wwwroot

В проектах MVC соглашению статическое содержмое, доставляемое клиентам  в папку wwwroot, папки которой организованы по типу содержимого, так что таблицы стилей CSS находятся в папке wwwroot/css , файлы JavaScript - в папке wwwroot /js

Стандартная конфигурация ASP.NET включает поддержку обслуживания статического содержимого, такого как изображения, таблицы стилей CSS и файлы JavaScript, которая автоматически отображает запросы на папку wwwroot. 

По соглашению пакеты CSS и JavaScгipt от независимых поставщиков устанавливаются в папку wwwroot /lib

---

### Про дублирование кода

Инфраструктура MVC предлагает несколько средтв, помогающих сократить дублирование. 
К таким средтвам относятся:
- компоновки Razor
- частичные представления
- компоненты представлений. 


###  Про паттерн  MVC

Совет. Многих разработчиков, только приступивших к ознакомлению с паттерном MVC, приводит в замешательство идея помещения логики в модель данных из-за их уверенности
в том, что целью паттерна MVC является отделение данных от логики. Это заблуждение:
цель паперна MVC  -  разделение приложения на три функциональных области, каждая
из которых может содержать и логику, и данные. Цель не в том, чтобы устранить логику
из модели. Наоборот, цель в том, чтобы гарантировать наличие в модели только логики,
предназначенной для создания и управления данными модели.

### Службы
Службы ASP.NEТ - это объекты. которые предоставляют функциональность другим частям приложения.
